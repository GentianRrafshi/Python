import pandas as pa
import quandl
import math
import numpy as np
from sklearn import preprocessing, svm
from sklearn.model_selection import cross_validate,train_test_split
from sklearn.linear_model import LinearRegression
import datetime
import matplotlib.pyplot as plt
from matplotlib import style
import pickle

style.use('ggplot')

#Get Data
data_frame = quandl.get('WIKI/GOOGL')
data_frame = data_frame[['Adj. Open', 'Adj. High', 'Adj. Low', 'Adj. Close', 'Adj. Volume']]

#rearrange Data
data_frame['High_Low_Percent'] = (data_frame['Adj. High'] - data_frame['Adj. Close']) / data_frame['Adj. Close'] *100
data_frame['High_Low_Percent_Change'] = (data_frame['Adj. Close'] - data_frame['Adj. Open']) / data_frame['Adj. Open'] *100

#New rearranged table
data_frame = data_frame[['Adj. Close', 'High_Low_Percent', 'High_Low_Percent_Change', 'Adj. Volume']]

forecast_col = 'Adj. Close'
data_frame.fillna(-9999, inplace=True)

forecast_out = int(math.ceil(0.01*len(data_frame)))
print(forecast_out)

data_frame['label'] = data_frame[forecast_col].shift(-forecast_out)

X = np.array(data_frame.drop(['label'], 1))
X = preprocessing.scale(X)
X_lately = X[-forecast_out:]
X = X[:-forecast_out]

data_frame.dropna(inplace=True)
y = np.array(data_frame['label'])

#Test Train Shift
X_train, X_test, y_train,  y_test = train_test_split(X, y, test_size=0.2)

#Linear Regression and Accuracy
classifier = LinearRegression()
classifier.fit(X_train, y_train)

#create pickledata
with open('linearregression.pickle','wb') as f:
    pickle.dump(classifier, f)

#read pickledata
pickle_in = open('linearregression.pickle', 'rb')
classifier = pickle.load(pickle_in)

#Predictions, Accuracy and how far predicted
accuracy = classifier.score(X_test, y_test)
forecast_set = classifier.predict(X_lately)
print(forecast_set, '\n', "Die Genauigkeit ist: " + str(accuracy), '\n', 'Für wie viele Tage sage ich vorraus: ' + str(forecast_out))
data_frame['Forecast'] = np.nan

#Axis labeling
last_date = data_frame.iloc[-1].name
last_unix = last_date.timestamp()
one_day = 86400
next_unix = last_unix + one_day

for i in forecast_set:
    next_date = datetime.datetime.fromtimestamp(next_unix)
    next_unix += one_day
    data_frame.loc[next_date] = [np.nan for _ in range(len(data_frame.columns)-1 )] +[i]

#Plot
data_frame['Adj. Close'].plot()
data_frame['Forecast'].plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('')
plt.show()
