from statistics import mean
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
import random

# xs = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64)
# ys = np.array([5, 4, 6, 4, 5, 7, 8, 6, 10, 11], dtype=np.float64)


def create_dataset(amount, variance, step=2, correlation='pos'):
    start = 1
    ys = []
    for i in range(amount):
        y = start + random.randrange(-variance, variance)
        ys.append(y)
        if correlation and correlation == 'pos':
            start += step
        elif correlation and correlation == 'neg':
            start -= step
    xs = [i for i in range(len(ys))]
    return np.array(xs, dtype=np.float64), np.array(ys, dtype=np.float64)


def best_fit_slope(xs, ys):
    m = (
        ((mean(xs) * mean(ys)) - mean(xs * ys)) /
        ((mean(xs) * mean(xs)) - mean(xs * xs))
        )
    return m


def best_fit_intercept(xs, ys):
    b = mean(ys) - m * mean(xs)
    return b


def squared_error(ys_original, ys_line):
    return sum((ys_line - ys_original)*(ys_line - ys_original))


def coefficient_of_determination(ys_original, ys_line):
    y_mean_line = mean(ys_original)
    squared_error_regression = squared_error(ys_original, ys_line)
    squared_error_y_mean = squared_error(ys_original, y_mean_line)
    return 1 - (squared_error_regression / squared_error_y_mean)


xs, ys = create_dataset(40, 40, 10, correlation='pos')

m = best_fit_slope(xs, ys)
b = best_fit_intercept(xs, ys)

regression_line = [(m*x)+b for x in xs]

r_squared = coefficient_of_determination(ys, regression_line)
predict_x = 15
predict_y = (m * predict_x) + b


print('Die Steigung lautet:', m, ', der y-Achsenabschniit lautet:', b,
      'und vorraussichtlich ist wird ür x=', predict_x, 'y=', predict_y, 'sein, wobei die Genauigkeit', r_squared,
      'beträgt.')

style.use('fivethirtyeight')
plt.scatter(xs, ys, color='red')
plt.scatter(predict_x, predict_y, color='green')
plt.plot(xs, regression_line)
plt.show()
