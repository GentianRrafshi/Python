import numpy as np
import matplotlib.pyplot as plt
import collections

avg = [
    4.2313582,
    4.5441076,
    4.8527279,
    5.1705124,
    5.4846148,
    5.7992342,
    6.1070173,
    6.4128032,
    6.7056872,
    6.9878762,
    7.2515752,
    7.3844234,
    7.4933978,
    7.5774802,
    7.6456982,
    7.6859291,
    7.7077266,
    7.7018591,
    7.6864497,
    7.6415673,
    7.5872438,
    7.5231848,
    7.4474405,
    7.3534392,
    7.2519555,
    7.1340724,
    7.0127267,
    6.8817126,
    6.7373746,
    6.6097775,
    6.4624529,
    6.3111974,
    6.1512925,
    6.0046268,
    5.8518531,
    5.6932053,
    5.5314846,
    5.3775842,
    5.2205438,
    5.0748378,
    4.9080341,
    4.743784,
    4.5967192,
    4.4464523,
    4.292148,
    4.1530652,
    3.9986419,
    3.8534553,
    3.7133266,
    3.571019,
    3.4447702,
    3.3124492,
    3.1841036,
    3.0551913,
    2.9327679,
    2.8124504,
    2.6943544,
    2.5831238,
    2.4774802,
    2.3715514,
    2.2681007,
    2.171,
    2.0688079,
    1.9799842,
    1.8825358,
    1.7992932,
    1.7157808,
    1.6361209,
    1.5590861,
    1.4834017,
    1.4177772,
    1.3494589,
    1.2776974,
    1.2103313,
    1.1512281,
    1.0930199,
    1.0381922,
    0.9874559,
    0.9288624,
    0.8824012,
    0.8354476,
    0.7862895,
    0.7463664,
    0.7074827,
    0.6699267,
    0.6293731,
    0.5933736,
    0.5582437,
    0.5277507,
    0.495052,
    0.4668483,
    0.4386476,
    0.4139203,
    0.3905304,
    0.3641633,
    0.3440857,
    0.3212109,
    0.3024451,
    0.281655,
    0.2657213,
    0.248072,
    0.2329648,
    0.2159596,
    0.2024613,
    0.1890062,
    0.1748593,
    0.1668398,
    0.154559,
    0.1434784,
    0.1338214,
    0.1242853,
    0.114277,
    0.1060481,
    0.1002327,
    0.0921899,
    0.0864322,
    0.0789708,
    0.0742128,
    0.0681543,
    0.0637028,
    0.0580473,
    0.054147,
    0.0492005,
    0.0464979,
    0.0424958,
    0.0403669,
    0.0368494,
    0.03283,
    0.0305496,
    0.0281486,
    0.0254252,
    0.022683,
    0.0211541,
    0.0191188,
    0.0178843,
    0.0157372,
    0.0143388,
    0.014041,
    0.0119014,
    0.0112858,
    0.0097693,
    0.0088301,
    0.008539,
    0.0070345,
    0.006295,
    0.0062929,
    0.0058817,
    0.0050372,
    0.0044722,
    0.00409
]

prob = [
    0.07692307692307693,
    0.08144796380090498,
    0.08917043740573152,
    0.09460399544433157,
    0.10328685320281959,
    0.10993720565149141,
    0.11975959614615087,
    0.12763750344655062,
    0.13894576488533233,
    0.14828604807040563,
    0.08421637693716912,
    0.08333667364808756,
    0.0848702035903424,
    0.08301217116273091,
    0.08357698557062428,
    0.08046853706085695,
    0.07953809348704428,
    0.0749192097260486,
    0.07210060687872638,
    0.06529695882483295,
    0.06017119162577961,
    0.05816875041014905,
    0.05621253519221202,
    0.053951715167627014,
    0.051676630551473667,
    0.04910076033564793,
    0.04677245162025962,
    0.04411354338086778,
    0.04179615917583688,
    0.039474432138603126,
    0.0375708285681343,
    0.03583566200079015,
    0.0340834830646647,
    0.03240692617748429,
    0.030721075790561568,
    0.029133733262747052,
    0.027604662429548624,
    0.02614998756784291,
    0.0247859454268233,
    0.023507013775409324,
    0.02229175448682209,
    0.021130766274270796,
    0.02001384161698558,
    0.018950362415193264,
    0.017932160440746567,
    0.01697033346589648,
    0.016054794087303873,
    0.015187601620818263,
    0.01436559395965475,
    0.013583706759374975
]

if __name__ == '__main__':
    s = 52  # amount of cards in your deck
    expectation = []

    expect = 220 / 52
    expectation.append(expect)

    for target in range(1, len(prob)):  # run till 150 points
        expect += ((220 - (target)) - (target) * 12) * prob[target] / s
        expectation.append(expect)
        print(expect)

    with plt.style.context('seaborn'):
        y = expectation
        x = np.arange(1, len(y) + 1, 1)  # arange excludes stop

        y2 = avg[0:50]

        plt.plot(x, y,
                 color='#dc7633',
                 linestyle='dashed',
                 marker='P',
                 markerfacecolor='#3498db',
                 label='theoretische Erwartungswerte'
                 )  # Limit for View is at bins=10^4!

        plt.plot(x, y2,
                 color='#800000',
                 linestyle='dashed',
                 marker='X',
                 markerfacecolor='#008080',
                 label='simulierte Erwartungswerte'
                 )  # Limit for View is at bins=10^4!

        plt.legend(loc='upper right',
                   prop={'weight': 'bold', 'size': 15},
                   frameon=True,
                   fancybox=True,
                   shadow=True,
                   facecolor='white')  # location of legend upper right (best option)

        plt.title('Der maximale Erwartungswert liegt bei '
                  + str(round(np.amax(y),6))
                  + ' Punkten. \n Dies ist bei der Stoppunktzahl von '
                  + str(y.index(np.amax(y)) + 1)
                  + ' Punkten erreicht worden.',
                  size=20,
                  weight='bold')

        plt.yticks(np.arange(0, np.amax(y)+3, 2))  # arange excludes stop
        plt.xticks(np.arange(0, len(y)+5, 10))  # arange excludes stop
        plt.tick_params(labelsize=15)
        plt.xlabel('Stoppunktzahl', fontsize=20, fontweight='bold')
        plt.ylabel('Erwartunswert', fontsize=20, fontweight='bold')

    plt.grid(True)
    plt.show()
